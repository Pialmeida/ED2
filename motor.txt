/*
* Engineering Design Group 2 Software
* Author: Group 2
* 
* The program allows the user to control the movement of a motorized cart from
* the IOS App "ArduinoBlue" using the joystick feature.
* 
* Author: Pedro Almeida
*/

#include <SoftwareSerial.h> // SoftwareSerial for serial communication with HM-10 bluetooth module.
#include <ArduinoBlue.h> // ArduinoBlue bluetooth library.
#include <dht.h> // Library for DHT Sensor.

dht DHT; // Initialize structure dht for temperature and humidity readings.

const unsigned long BAUD_RATE = 9600; // Recommended BAUD Rate for controllers.

const int pingPin = 7; // Trigger Pin of Ultrasonic Sensor
const int echoPin = 6; // Echo Pin of Ultrasonic Sensor

// MOTOR LEFT PINS
const int PWRA = 11;
const int DIRA = 25;

// MOTOR RIGHT PINS
const int PWRP = 12;
const int PWRN = 13;
const int INP = 22;
const int INN = 23;

// MOTOR PARAMETERS
// Minimum PWM value of analogWrite to spin motor when robot is on the ground.
const int MINIMUM_MOTOR_SPEED = 65;

// TEMPERATURE/HUMIDITY SENSOR PIN
define dht_apin A0

// LOOP TIMINGS
unsigned long currentMillis = 0;
unsigned long previousMillisUltrasonic = 0;
unsigned long previousMillisDHT = 0;
unsigned long previousMillisController = 0;

//WARNING TRACKERS
int ultrasonicWarning = 0;
int DHTWarning = 0;

// INTERVALS
unsigned long previousMillis = 0;
const int inputInterval = 10;
const int DHTInterval = 5000;
const int ultrasonicInterval = 250;

// HM10 BLUETOOTH MODULE PINS
// NOTE: Arduino MEGA pins 50 and 51 support change interrupts.
// https://www.arduino.cc/en/Reference/softwareSerial
const int BLUETOOTH_TX = 50;
const int BLUETOOTH_RX = 51;

SoftwareSerial softSerial(BLUETOOTH_TX, BLUETOOTH_RX); // Object for serial communication to HM-10 bluetooth module using ditigal pins.
ArduinoBlue phone(softSerial); // Object for smartphone robot control.

void motorBrake() {
	digitalWrite(PWRA, LOW);
	digitalWrite(DIRA, LOW);
	digitalWrite(PWRP, LOW);
	digitalWrite(PWRN, LOW);
	digitalWrite(INP, LOW);
	digitalWrite(INN, LOW);
}

void setPins() {
	// Set pins as input or output
	pinMode(PWRA, OUTPUT);
	pinMode(DIRA, OUTPUT);
	pinMode(PWRP, OUTPUT);
	pinMode(PWRN, OUTPUT);
	pinMode(INP, OUTPUT);
	pinMode(INN, OUTPUT);
}

void motorSetForward() {
	digitalWrite(DIRA, HIGH);
	digitalWrite(INP, HIGH);
	digitalWrite(INN, LOW);
}

void motorSetBackward() {
	digitalWrite(DIRA, LOW);
	digitalWrite(INP, LOW);
	digitalWrite(INN, HIGH);
}

int assessMovementSafety() {
// Converting Ultrasonic sensor data to distance.

	if (currentMillis - previousMillisUltrasonic >= inputInterval) {
		long duration, inches, cm;
		pinMode(pingPin, OUTPUT);
		digitalWrite(pingPin, LOW);
		delayMicroseconds(2);
		digitalWrite(pingPin, HIGH);
		delayMicroseconds(10);
		digitalWrite(pingPin, LOW);
		pinMode(echoPin, INPUT);
		duration = pulseIn(echoPin, HIGH);
		inches = microsecondsToInches(duration);

		previousMillisUltrasonic = currentMillis;

		ultrasonicWarning = assessObstacle(inches); // Assess Safety of movement based on distance of obstacle
	}
}

int assessObstacle(long inches) {
	if (inches < 24){ // At 2 feet initialize breaking.
		ultrasonicWarning = 1;
		Serial.print("Obstacle Detected at");
		Serial.print(inches/12);
		Serial.print("feet.\n Breaking initialized.");
	} else if (inches < 60) { // At 5 feet send warning.
		ultrasonicWarning = 0;
		Serial.print("Obstacle Detected at");
		Serial.print(inches/12);
		Serial.print("feet.\n");
	}

	return ultrasonicWarning;
}

long microsecondsToInches(long microseconds) {
	return microseconds / 74 / 2;
}

void checkDHT() { // Reads input from Temperature/Humidity Sensor
	int tempWarning, humWarning;

		if (currentMillis - previousMillisDHT >= DHTInterval) {

		DHT.read11(dht_apin);
		if ((DHT.temperature > 90) || (DHT.humidity < 30 || DHT.humidity > 70)) { // Warnings levels are 90 C and <30% or >70%
			if (DHT.temperature > 90) {
				tempWarning = 1;
				Serial.print("Temperature Warning");
				Serial.print(DHT.temperature);
				Serial.print("C\n");
			}
			if (DHT.humidity < 30 || DHT.humidity > 70) {
				humWarning = 1; 
				Serial.print("Humidity Levels Warning");
				Serial.print(DHT.humidity);
				Serial.print("%\n");
			}
		}else if ((DHT.temperature > 70) || (DHT.humidity < 40 || DHT.humidity > 60)) { // Critical levels are 70 C and <30% or >70%
			if (DHT.temperature > 70) {
				tempWarning = 0;
				Serial.print("Critical Temperature Reached");
				Serial.print(DHT.temperature);
				Serial.print("C\n");
			}
			if (DHT.humidity < 40 || DHT.humidity > 60) {
				humWarning = 0;
				Serial.print("Critical Humidity Reached");
				Serial.print(DHT.humidity);
				Serial.print("%\n");
			}
		}
		previousMillisDHT = currentMillis;


		if (tempWarning == 1 || humWarning == 1){
			DHTWarning = 1;
		}else{
			DHTWarning = 0;
		}
	}
}

void controlDrive() {
	if (DHTWarning == 1) {
		phone.sendMessage("DHT Warning Detected. Terminating Operation");
		motorBrake();
		return;
	}

	if (currentMillis - previousMillisController >= inputInterval) {
		int throttle = phone.getThrottle() - 49; // 49 is center position
		int steering = phone.getSteering() - 49; // 49 is center position

		if (throttle == 0) {
			// If throttle is zero, don't move.
			motorBrake();
			return;
		}

		// Determine forwards or backwards.
		if (throttle > 0) {
		// Forward

			if (ultrasonicWarning == 0) {
				motorSetForward();
			}else{
				phone.sendMessage("Obstacle detected. No forward motion allowed.");
				motorBrake();
				return;
			}
		}else if (throttle < 0){
		// Backward
			motorSetBackward();
		}

		// Map throttle to PWM range.
		int mappedSpeed = map(abs(throttle), 0, 50, MINIMUM_MOTOR_SPEED, 255);
		// Map steering to PWM range.
		int reducedSpeed = map(abs(steering), 0, 50, mappedSpeed, MINIMUM_MOTOR_SPEED);

		int leftMotorSpeed, rightMotorSpeed;
		if (steering > 0) {
			// Turn Right: reduce right motor speed
			leftMotorSpeed = mappedSpeed;
			rightMotorSpeed = reducedSpeed;
		} else {
			// Turn Left: reduce left motor speed
			leftMotorSpeed = reducedSpeed;
			rightMotorSpeed = mappedSpeed;
		}

		// Set motor speeds
		analogWrite(PWRA, leftMotorSpeed);
		analogWrite(ENA, rightMotorSpeed);

		// Print Debug Info
		//Serial.print("throttle: "); Serial.print(throttle);
		//Serial.print("\tsteering: "); Serial.print(steering);
		//Serial.print("\tmappedSpeed: "); Serial.print(mappedSpeed);
		//Serial.print("\treducedSpeed: "); Serial.print(reducedSpeed);
		//Serial.print("\tleftMotorSpeed: "); Serial.print(leftMotorSpeed);
		//Serial.print("\trightMotorSpeed: "); Serial.println(rightMotorSpeed);

		previousMillisController = currentMillis;
		}
	}

void doTesting() {
	// Uncomment to test.
	// motorSetForward();
	// motorSetBackward();
	// motorBrake();

	// Set motor speeds to max
	analogWrite(PWRA, 255);
	analogWrite(ENA, 255);
}

void setup() {
delay(1000);
// Start serial communications.
// The baud rate must be the same for both serials.
// Start communication with HM-10 bluetooth module.
softSerial.begin(BAUD_RATE);

// Begin serial communication with computer.
Serial.begin(BAUD_RATE);

// Set pin modes
setPins();

delay(1000);

Serial.println("SETUP COMPLETE");
}

void loop() {
currentMillis = millis();

//assessMovementSafety();
checkDHT();

controlDrive(); // Uncomment this after testing.

}
